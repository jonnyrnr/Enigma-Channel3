import React, { useState, useEffect } from 'react';
import type { YouTubePlan, SavedPlan } from '../types';
import { generateYouTubePlan } from '../services/geminiService';
import PlanSection from './PlanSection';
import { WandSparklesIcon, BrainCircuitIcon, BotMessageSquareIcon, BarChartIcon, DollarSignIcon, BookOpenIcon, SaveIcon, RefreshCwIcon, Share2Icon, GiftIcon, PrinterIcon, VideoIcon, MegaphoneIcon, TwitterIcon, FacebookIcon, CopyIcon, CheckIcon, AlertTriangleIcon, InstagramIcon, TiktokIcon } from './Icons';
import LoadingSpinner, { SkeletonLine } from './LoadingSpinner';
import HistoryPanel from './HistoryPanel';
import { AnimatePresence, motion } from 'framer-motion';

const ToolkitPage: React.FC = () => {
  const [request, setRequest] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [plan, setPlan] = useState<YouTubePlan | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [savedPlans, setSavedPlans] = useState<SavedPlan[]>([]);
  const [showHistory, setShowHistory] = useState<boolean>(false);
  const [isPlanSaved, setIsPlanSaved] = useState<boolean>(false);
  const [copyStatus, setCopyStatus] = useState<boolean>(false);

  useEffect(() => {
    try {
      const storedPlans = localStorage.getItem('youtubeMysticPlans');
      if (storedPlans) {
        setSavedPlans(JSON.parse(storedPlans));
      }
    } catch (e) {
      console.error("Failed to load plans from storage", e);
    }
  }, []);

  const handleGeneratePlan = async () => {
    if (!request.trim()) {
      setError("Please describe your channel idea first.");
      return;
    }
    setIsLoading(true);
    setError(null);
    setPlan(null);
    setIsPlanSaved(false);
    try {
      const generatedPlan = await generateYouTubePlan(request);
      setPlan(generatedPlan);
    } catch (err) {
      console.error(err);
      if (err instanceof Error) {
        setError(err.message);
      } else {
        setError('An unknown error occurred while communicating with the AI. Please try again.');
      }
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleSavePlan = () => {
    if (!plan) return;
    const newSavedPlan: SavedPlan = {
      id: Date.now(),
      request,
      plan,
      createdAt: new Date().toISOString(),
    };
    const updatedPlans = [newSavedPlan, ...savedPlans];
    setSavedPlans(updatedPlans);
    localStorage.setItem('youtubeMysticPlans', JSON.stringify(updatedPlans));
    setIsPlanSaved(true);
  };
  
  const handleDeletePlan = (id: number) => {
    const updatedPlans = savedPlans.filter(p => p.id !== id);
    setSavedPlans(updatedPlans);
    localStorage.setItem('youtubeMysticPlans', JSON.stringify(updatedPlans));
  };

  const handleLoadPlan = (savedPlan: SavedPlan) => {
    setRequest(savedPlan.request);
    setPlan(savedPlan.plan);
    setShowHistory(false);
    setError(null);
    setIsPlanSaved(true);
  };
  
  const handleGenerateNew = () => {
      setPlan(null);
      setRequest("");
      setError(null);
      setIsPlanSaved(false);
  }

  const formatPlanForClipboard = (p: YouTubePlan): string => {
    let t = `✨ My YouTube Channel Blueprint for "${request}" ✨\n\nGenerated by The Enigma Channel's Creator Toolkit.\n\n`;

    t += `🔮 **Channel Branding**\n`;
    t += `- Title Idea: ${p.channelBranding.title}\n`;
    t += `- Description: ${p.channelBranding.description}\n`;
    t += `- Name Ideas: ${p.channelBranding.nameIdeas.join(', ')}\n`;
    t += `- Tagline Ideas: ${p.channelBranding.taglineIdeas.join(', ')}\n`;
    t += `- Visual Identity: ${p.channelBranding.visualIdentity}\n\n`;

    t += `🧠 **Content Strategy**\n`;
    t += `- Title: ${p.contentStrategy.title}\n`;
    p.contentStrategy.contentPillars.forEach(pi => {
        t += `  - Pillar: ${pi.pillar}\n`;
        t += `    - Ideas: ${pi.ideas.join(', ')}\n`;
    });
    t += `- Video Formats: ${p.contentStrategy.videoFormats.join(', ')}\n\n`;

    t += `🎬 **Video Ideas**\n`;
    p.videoIdeas.ideas.forEach(idea => {
        t += `- ${idea.title}: ${idea.description}\n`;
    });
    t += `\n`;

    t += `⚙️ **Automation & Workflow**\n`;
    p.automationWorkflow.steps.forEach(step => {
        t += `- ${step.step}: ${step.details} (Tools: ${step.tools.join(', ')})\n`;
    });
    t += `\n`;
    
    t += `🚀 **Social Media Promotion**\n`;
    t += `- Twitter: \n${p.socialMediaPromotion.twitterPosts.map(post => `  - "${post}"`).join('\n')}\n`;
    t += `- Instagram: \n${p.socialMediaPromotion.instagramCaptions.map(caption => `  - "${caption}"`).join('\n')}\n`;
    t += `- TikTok: \n${p.socialMediaPromotion.tiktokIdeas.map(idea => `  - "${idea}"`).join('\n')}\n`;
    t += `- Facebook: \n${p.socialMediaPromotion.facebookPosts.map(post => `  - "${post}"`).join('\n')}\n\n`;

    t += `📈 **Traffic Generation**\n`;
    p.trafficGeneration.strategies.forEach(s => {
        t += `- ${s.strategy}: ${s.details}\n`;
    });
    t += `\n`;

    t += `💰 **Monetization Methods**\n`;
    p.monetization.methods.forEach(m => {
        t += `- ${m.method}: ${m.details}\n`;
        t += `  - CTA: "${m.cta}"\n`;
    });
    t += `\n`;

    t += `🎁 **Merchandise & Offerings**\n`;
    p.merchandiseOfferings.products.forEach(prod => {
        t += `- ${prod.product}: ${prod.details} (Fulfillment: ${prod.fulfillment})\n`;
    });

    return t;
  };

  const handleShare = (platform: 'twitter' | 'facebook') => {
    if (!plan) return;
    const shareText = `I just created a complete YouTube channel blueprint using The Enigma Channel's Creator Toolkit! ✨ #YouTubeStrategy #ContentCreator #PsychicTools`;
    const encodedText = encodeURIComponent(shareText);
    const appUrl = encodeURIComponent(window.location.href);

    let url = '';
    if (platform === 'twitter') {
        url = `https://twitter.com/intent/tweet?text=${encodedText}&url=${appUrl}`;
    } else if (platform === 'facebook') {
        url = `https://www.facebook.com/sharer/sharer.php?u=${appUrl}&quote=${encodedText}`;
    }

    if (url) {
        window.open(url, '_blank', 'noopener,noreferrer');
    }
  };

  const handleCopyPlan = () => {
    if (!plan) return;
    navigator.clipboard.writeText(formatPlanForClipboard(plan)).then(() => {
        setCopyStatus(true);
        setTimeout(() => setCopyStatus(false), 2000);
    }).catch(err => {
        console.error('Failed to copy plan: ', err);
        setError("Could not copy plan to clipboard. Please try again.");
    });
  };

  const renderInitialState = () => (
    <motion.div 
      key="initial"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.5 }}
      className="text-center bg-gray-800/30 p-8 rounded-2xl border border-purple-500/20 shadow-lg"
    >
      <WandSparklesIcon className="w-16 h-16 text-purple-400 mx-auto mb-4" />
      <h2 className="text-3xl font-bold font-fancy mb-3 text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500">
        YouTube Channel Blueprint Generator
      </h2>
      <p className="text-gray-400 mb-6 max-w-2xl mx-auto">
        Describe your dream channel, and let the digital oracle craft a complete strategy for your success—from content pillars and video ideas to monetization and promotion.
      </p>
      <div className="max-w-xl mx-auto">
        <textarea
          value={request}
          onChange={(e) => setRequest(e.target.value)}
          placeholder="e.g., 'A cozy channel about tarot for beginners, focusing on artful visuals and practical advice...'"
          className="w-full h-32 bg-gray-900/70 border border-purple-500/30 rounded-lg p-4 text-gray-200 placeholder-gray-500 focus:ring-2 focus:ring-pink-500 focus:outline-none transition-colors"
          aria-label="Describe your channel idea"
        />
        <p className="text-xs text-gray-500 mt-2 text-left">
          <strong>Tip:</strong> Be descriptive! The more detail you provide about your niche, target audience, and vibe, the better the blueprint will be.
        </p>
      </div>
      <div className="flex gap-4 justify-center mt-6">
        <button
          onClick={handleGeneratePlan}
          disabled={isLoading}
          className="font-fancy font-bold bg-gradient-to-r from-purple-600 to-pink-600 text-white py-3 px-8 rounded-full shadow-lg hover:shadow-xl hover:scale-105 transform transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isLoading ? 'Conjuring...' : 'Generate Blueprint'}
        </button>
        <button 
            onClick={() => setShowHistory(true)}
            className="font-fancy font-bold bg-gray-800/50 text-purple-300 py-3 px-6 rounded-full shadow-lg hover:shadow-xl hover:bg-purple-900/50 transform transition-all duration-300 ease-in-out flex items-center"
        >
            <BookOpenIcon className="w-5 h-5 mr-2" /> History
        </button>
      </div>
    </motion.div>
  );

  const renderLoadingState = () => (
    <motion.div 
      key="loading"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.3 }}
      className="space-y-6"
    >
        <div className="flex flex-col items-center justify-center p-8 bg-gray-800/30 rounded-2xl border border-purple-500/20 shadow-lg">
            <LoadingSpinner />
            <p className="text-xl font-fancy text-purple-300 mt-4">Crafting your cosmic blueprint...</p>
            <p className="text-gray-500">The spirits are hard at work.</p>
        </div>
        <div className="space-y-4">
            <SkeletonLine height="4rem" className="rounded-xl" />
            <SkeletonLine height="4rem" className="rounded-xl" />
            <SkeletonLine height="4rem" className="rounded-xl" />
        </div>
    </motion.div>
  );

  const renderPlan = () => {
    if (!plan) return null;

    return (
    <motion.div 
        key="plan"
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="space-y-8"
    >
      <div className="p-4 bg-gray-800/50 rounded-xl border border-purple-500/20">
          <p className="text-sm text-purple-300 font-fancy">Your Vision:</p>
          <p className="text-gray-200 font-semibold">{request}</p>
      </div>
      
      {/* Action Bar */}
      <div className="flex flex-wrap gap-3 items-center justify-between p-3 bg-gray-900/50 rounded-full border border-purple-500/20 sticky top-4 z-10 backdrop-blur-sm">
          <div className="flex items-center gap-2">
            <button
                onClick={handleSavePlan}
                disabled={isPlanSaved}
                className="font-semibold bg-gray-800/80 text-purple-300 py-2 px-4 rounded-full shadow-md hover:bg-purple-900/50 transform transition-all duration-200 ease-in-out flex items-center disabled:bg-green-900/50 disabled:text-green-300 disabled:cursor-not-allowed"
            >
                {isPlanSaved ? <CheckIcon className="w-5 h-5 mr-2" /> : <SaveIcon className="w-5 h-5 mr-2" />}
                {isPlanSaved ? 'Saved!' : 'Save Blueprint'}
            </button>
            <button
                onClick={() => setShowHistory(true)}
                className="font-semibold bg-gray-800/80 text-purple-300 p-2.5 rounded-full shadow-md hover:bg-purple-900/50 transform transition-all duration-200 ease-in-out flex items-center"
                aria-label="View history"
            >
                <BookOpenIcon className="w-5 h-5" />
            </button>
          </div>

          <div className="flex items-center gap-2">
            <span className="text-sm font-semibold text-gray-400 mr-2 hidden sm:inline">Share:</span>
            <button onClick={() => handleShare('twitter')} className="p-2.5 bg-sky-500/10 text-sky-400 rounded-full hover:bg-sky-500/20 transition-colors"><TwitterIcon className="w-5 h-5" /></button>
            <button onClick={() => handleShare('facebook')} className="p-2.5 bg-blue-600/10 text-blue-500 rounded-full hover:bg-blue-600/20 transition-colors"><FacebookIcon className="w-5 h-5" /></button>
            <button onClick={handleCopyPlan} className={`p-2.5 rounded-full transition-colors ${copyStatus ? 'bg-green-500/20 text-green-400' : 'bg-gray-600/30 text-gray-300 hover:bg-gray-600/50'}`}>
                {copyStatus ? <CheckIcon className="w-5 h-5"/> : <CopyIcon className="w-5 h-5"/>}
            </button>
          </div>

          <button
              onClick={handleGenerateNew}
              className="font-semibold bg-gradient-to-r from-purple-600 to-pink-600 text-white py-2 px-4 rounded-full shadow-md hover:scale-105 transform transition-all duration-200 ease-in-out flex items-center"
          >
              <RefreshCwIcon className="w-5 h-5 mr-2" />
              Generate New
          </button>
      </div>


      <div className="space-y-6">
        <PlanSection title={plan.channelBranding.title} icon={<WandSparklesIcon className="w-6 h-6" />} defaultOpen>
            <p className="mb-4">{plan.channelBranding.description}</p>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                    <h4 className="font-bold text-purple-300 mb-2">Channel Name Ideas</h4>
                    <ul className="list-disc list-inside space-y-1 text-gray-300">
                        {plan.channelBranding.nameIdeas.map((idea, i) => <li key={i}>{idea}</li>)}
                    </ul>
                </div>
                <div className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                    <h4 className="font-bold text-purple-300 mb-2">Tagline Ideas</h4>
                    <ul className="list-disc list-inside space-y-1 text-gray-300">
                        {plan.channelBranding.taglineIdeas.map((idea, i) => <li key={i}>{idea}</li>)}
                    </ul>
                </div>
            </div>
            <div className="mt-4 bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                <h4 className="font-bold text-purple-300 mb-2">Visual Identity</h4>
                <p>{plan.channelBranding.visualIdentity}</p>
            </div>
        </PlanSection>

        <PlanSection title={plan.contentStrategy.title} icon={<BrainCircuitIcon className="w-6 h-6" />}>
          <p className="mb-4">{plan.contentStrategy.description}</p>
          <ul className="space-y-4">
              {plan.contentStrategy.contentPillars.map((pillar, i) => (
                  <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                      <h4 className="font-bold text-purple-300">{pillar.pillar}</h4>
                      <ul className="list-disc list-inside pl-4 mt-2 text-sm">
                          {pillar.ideas.map((idea, j) => <li key={j}>{idea}</li>)}
                      </ul>
                  </li>
              ))}
          </ul>
          <div className="mt-4 bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
              <h4 className="font-bold text-purple-300 mb-2">Video Formats</h4>
              <p>{plan.contentStrategy.videoFormats.join(', ')}</p>
          </div>
        </PlanSection>

        <PlanSection title={plan.videoIdeas.title} icon={<VideoIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.videoIdeas.description}</p>
            <ul className="space-y-4">
                {plan.videoIdeas.ideas.map((idea, i) => (
                    <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                        <h4 className="font-bold text-purple-300">{idea.title}</h4>
                        <p className="text-sm mt-1">{idea.description}</p>
                    </li>
                ))}
            </ul>
        </PlanSection>

        <PlanSection title={plan.automationWorkflow.title} icon={<BotMessageSquareIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.automationWorkflow.description}</p>
            <ul className="space-y-4">
                {plan.automationWorkflow.steps.map((step, i) => (
                    <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                        <h4 className="font-bold text-purple-300">{step.step}</h4>
                        <p className="text-sm mt-1">{step.details}</p>
                        <p className="text-xs mt-2 text-gray-400"><strong>Tools:</strong> {step.tools.join(', ')}</p>
                    </li>
                ))}
            </ul>
        </PlanSection>
        
        <PlanSection title={plan.socialMediaPromotion.title} icon={<MegaphoneIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.socialMediaPromotion.description}</p>
            <div className="space-y-6">
                <div className="flex gap-4">
                    <TwitterIcon className="w-6 h-6 text-sky-400 flex-shrink-0 mt-1" />
                    <div>
                        <h4 className="font-bold text-sky-400">Twitter Posts</h4>
                        <ul className="list-disc list-inside mt-1 space-y-2 text-sm">
                            {plan.socialMediaPromotion.twitterPosts.map((post, i) => <li key={i}>{post}</li>)}
                        </ul>
                    </div>
                </div>
                <div className="flex gap-4">
                    <InstagramIcon className="w-6 h-6 text-pink-400 flex-shrink-0 mt-1" />
                    <div>
                        <h4 className="font-bold text-pink-400">Instagram Captions</h4>
                        <ul className="list-disc list-inside mt-1 space-y-2 text-sm">
                            {plan.socialMediaPromotion.instagramCaptions.map((caption, i) => <li key={i}>{caption}</li>)}
                        </ul>
                    </div>
                </div>
                 <div className="flex gap-4">
                    <TiktokIcon className="w-6 h-6 text-teal-300 flex-shrink-0 mt-1" />
                    <div>
                        <h4 className="font-bold text-teal-300">TikTok Ideas</h4>
                        <ul className="list-disc list-inside mt-1 space-y-2 text-sm">
                            {plan.socialMediaPromotion.tiktokIdeas.map((idea, i) => <li key={i}>{idea}</li>)}
                        </ul>
                    </div>
                </div>
                <div className="flex gap-4">
                    <FacebookIcon className="w-6 h-6 text-blue-500 flex-shrink-0 mt-1" />
                    <div>
                        <h4 className="font-bold text-blue-500">Facebook Posts</h4>
                        <ul className="list-disc list-inside mt-1 space-y-2 text-sm">
                            {plan.socialMediaPromotion.facebookPosts.map((post, i) => <li key={i}>{post}</li>)}
                        </ul>
                    </div>
                </div>
            </div>
        </PlanSection>

        <PlanSection title={plan.trafficGeneration.title} icon={<BarChartIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.trafficGeneration.description}</p>
            <ul className="space-y-4">
                {plan.trafficGeneration.strategies.map((s, i) => (
                    <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                        <h4 className="font-bold text-purple-300">{s.strategy}</h4>
                        <p className="text-sm mt-1">{s.details}</p>
                    </li>
                ))}
            </ul>
        </PlanSection>

        <PlanSection title={plan.monetization.title} icon={<DollarSignIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.monetization.description}</p>
            <ul className="space-y-4">
                {plan.monetization.methods.map((m, i) => (
                    <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                        <h4 className="font-bold text-purple-300">{m.method}</h4>
                        <p className="text-sm mt-1">{m.details}</p>
                        <p className="text-sm mt-2 font-semibold text-pink-400 bg-pink-900/20 p-2 rounded-md">CTA: "{m.cta}"</p>
                    </li>
                ))}
            </ul>
        </PlanSection>
        
        <PlanSection title={plan.merchandiseOfferings.title} icon={<GiftIcon className="w-6 h-6" />}>
            <p className="mb-4">{plan.merchandiseOfferings.description}</p>
             <ul className="space-y-4">
                {plan.merchandiseOfferings.products.map((prod, i) => (
                    <li key={i} className="bg-gray-900/50 p-4 rounded-lg border border-gray-700/50">
                        <h4 className="font-bold text-purple-300">{prod.product}</h4>
                        <p className="text-sm mt-1">{prod.details}</p>
                        <p className="text-xs mt-2 text-gray-400"><strong>Fulfillment:</strong> {prod.fulfillment}</p>
                    </li>
                ))}
            </ul>
        </PlanSection>

      </div>
    </motion.div>
    );
  };
  
  return (
    <motion.div 
      key="toolkit-page"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      transition={{ duration: 0.4 }}
    >
      <AnimatePresence mode="wait">
        {isLoading ? renderLoadingState() : plan ? renderPlan() : renderInitialState()}
      </AnimatePresence>
      
      {error && (
        <motion.div 
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="mt-6 flex items-start gap-3 bg-red-900/30 text-red-300 p-4 rounded-lg border border-red-500/50"
        >
            <AlertTriangleIcon className="w-6 h-6 flex-shrink-0 mt-0.5 text-red-400" />
            <div>
                <h3 className="font-bold">A Hiccup in the Cosmos</h3>
                <p className="text-sm">{error}</p>
            </div>
        </motion.div>
      )}

      <AnimatePresence>
        {showHistory && (
          <HistoryPanel
            plans={savedPlans}
            onLoad={handleLoadPlan}
            onDelete={handleDeletePlan}
            onClose={() => setShowHistory(false)}
          />
        )}
      </AnimatePresence>
    </motion.div>
  );
};

export default ToolkitPage;